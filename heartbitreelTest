import time
import board
import busio
import adafruit_ads1x15.ads1115 as ADS
from adafruit_ads1x15.analog_in import AnalogIn
import matplotlib.pyplot as plt
i2c = busio.I2C(board.SCL, board.SDA)

ads = ADS.ADS1115(i2c)

chan0 = AnalogIn(ads, ADS.P0)
chan1 = AnalogIn(ads, ADS.P1)
chan2 = AnalogIn(ads, ADS.P2)
chan3 = AnalogIn(ads, ADS.P3)
i=0
tab=[]
while i<10000 :
    tension=chan0.value
    print(tension)
    time.sleep(0.05)
    tab.append(tension)
    i=i+1
    
plt.show(tab)
print(tab)

if __name__== '__main__':
    
    GAIN = 2/3
    curState = 0
    thresh = 525
    P = 512
    T = 512
    stateChanged = 0
    sampleCounter = 0
    lastBeatTime = 0
    firstBeat = True
    secondBeat = False
    Pulse = False

IBI = 600
rate = [0]*10
amp = 100

lastTime = int(time.time()*1000)

# Main loop. use Ctrl-c to stop the code


while True:
# read from the ADC
    
    Signal = chan0.value #TODO: Select the correct ADC channel
    curTime = int(time.time()*1000) 

    sampleCounter += curTime - lastTime; # keep track of time in mS with this variable lastTime = curTime
    N = sampleCounter - lastBeatTime; # monitor the time since last beat to avoid noise

    ## find the peak
    if Signal < thresh and N > (IBI/5.0)*3.0 : # wait 3/5 of last IBI
        if Signal < T :
            T = Signal;

    if Signal > thresh and Signal > P:
        P = Signal;

       # T is the trough
      # keep track of lowest point in pulse wave
    # thresh condition helps avoid noise # P is the peak

    # keep track of highest point in pulse wave

    # signal surges up in value every time there is a pulse
    if N > 250 : # avoid high frequency noise
        if (Signal > thresh) and (Pulse == False) and (N > (IBI/5.0)*3.0) :
            Pulse = True; # set the Pulse
            IBI = sampleCounter - lastBeatTime;
            lastBeatTime = sampleCounter;

            if secondBeat :
                secondBeat = False;
                for i in range(0,10):
                    rate[i] = IBI;
                    
            if firstBeat :
                firstBeat = False;
                secondBeat = True;
                continue

            # keep a running total of the last 10 IBI values
            runningTotal = 0; # clear the runningTotal variable

            for i in range(0,9): # shift data in the rate array
                rate[i] = rate[i+1];
                runningTotal += rate[i];
                
                print('cououc2')
            rate[9] = IBI;
            runningTotal += rate[9];
            runningTotal /= 10;
            BPM = 60000/runningTotal;
            print ('BPM: {}'.format(BPM))

        if Signal < thresh and Pulse == True :

            Pulse = False;
            amp = P - T;
            thresh = amp/2 + T; P = thresh;
            T = thresh;

        if N > 2500 :
            thresh = 512;

            P = 512;
            T = 512;
            lastBeatTime =firstBeat = True;
            secondBeat = False;
            print ("no beats found")

        time.sleep(0.5)


